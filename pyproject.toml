[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "roller-mill-vibration"
version = "1.0.0"
description = "Time series prediction for roller mill vibration using advanced ML techniques"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Paulo CÃ©sar", email = "paulo@example.com"},
]
keywords = [
    "machine-learning",
    "time-series",
    "vibration-prediction",
    "industrial-iot",
    "deep-learning",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    "xgboost>=1.6.0",
    "tensorflow>=2.10.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.10.0",
    "mlflow>=1.28.0",
    "optuna>=3.0.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "fastapi>=0.85.0",
    "uvicorn>=0.18.0",
    "pydantic>=1.10.0",
    "statsmodels",
    "catboost"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.1.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "black>=22.6.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.971",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.1.0",
    "sphinx-rtd-theme>=1.0.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.15.0",
    "ipywidgets>=8.0.0",
]
monitoring = [
    "wandb>=0.13.0",
    "great-expectations>=0.15.0",
    "evidently>=0.2.0",
]
advanced = [
    "lightgbm>=3.3.0",
    "catboost>=1.1.0",
    "statsmodels>=0.13.0",
    "tsfresh>=0.19.0",
    "prophet>=1.1.0",
]

[project.urls]
"Homepage" = "https://github.com/paulo-cesar-pc/roller-mill-vibration"
"Bug Reports" = "https://github.com/paulo-cesar-pc/roller-mill-vibration/issues"
"Source" = "https://github.com/paulo-cesar-pc/roller-mill-vibration"
"Documentation" = "https://roller-mill-vibration.readthedocs.io"

[project.scripts]
roller-mill-train = "src.models.train:main"
roller-mill-predict = "src.models.predict:main"
roller-mill-evaluate = "src.evaluation.evaluate:main"
roller-mill-api = "src.api.main:main"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "xgboost.*",
    "tensorflow.*",
    "plotly.*",
    "mlflow.*",
    "optuna.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]